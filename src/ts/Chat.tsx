import * as React from "react";

import {CommentBox} from "./CommentBox"
import {UserList} from "./UserList"

import {UserListData} from "./UserListData"
import {CommentData} from "./CommentData"

interface ChatProps {

}

interface ChatState {
    userData: UserListData[];
    commentData: CommentData[];
    user: string;
}

export class Chat extends React.Component<ChatProps, ChatState> {
    constructor(props: ChatProps){
        super(props);
        this.state = {userData: [], commentData: [], user: ""};

        this.loadCommentsFromServer = this.loadCommentsFromServer.bind(this);
        this.loadUsersFromServer = this.loadUsersFromServer.bind(this);
    }
    //チャットの相手の変更されたとき
    changeUser(username: string){
        console.log(username);
        this.setState({userData: this.state.userData, commentData: this.state.commentData, user: username});
        this.loadCommentsFromServer();
    }
    //コメントをサーバから取得する関数
    loadCommentsFromServer() {
        $.ajax({
            url: "/api/comments",
            dataType: 'json',
            type: 'GET',
            cache: false,
            data: {author: this.state.user},
            success: function(data: any) {
                //現在のコメント情報をstateに記憶させる
                this.setState({userData: this.state.userData, commentData: data, user: this.state.user});
                // this.onScroll(data[data.length-1].id);
            }.bind(this),
            error: function(xhr: any, status: any, err: any) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    }
    //コメントがSubmitされたときに呼び出される関数                                                                      
    handleCommentSubmit(comment: CommentData) {
        //今のコメントリストの情報を取得
        var comments = this.state.commentData;                                              
        // Optimistically set an id on the new comment. It will be replaced by an    
        // id generated by the server. In a production application you would likely  
        // not use Date.now() for this and would have a more robust system in place. 
        comment.id = Date.now();
        comment.img = "";
        //新しいコメントを現在のコメントリストの後に追加                                                   
        var newComments = comments.concat([comment]);
        //コメントリストの情報を更新                                
        this.setState({userData: this.state.userData, commentData: newComments, user: this.state.user});
        $.ajax({
            url: "/api/comments",
            dataType: 'json',
            type: 'POST',
            data: {comment: comment, target: this.state.user},
            success: function(data: any) {
                //現在のコメントリストの情報を更新                                              
                this.setState({userData: this.state.userData, commentData: data, user: this.state.user});                                             
            }.bind(this),                                                              
            error: function(xhr: any, status: any, err: any) {
                //前のコメント情報に戻す                                        
                this.setState({userData: this.state.userData, commentData: comments, user: this.state.user});
                console.error(this.props.url, status, err.toString());                   
            }.bind(this)
        });                                                                          
    }
    //ユーザ情報の取得
    loadUsersFromServer() {
        $.ajax({
            url: "/api/userlist",
            dataType: 'json',
            cache: false,
            success: function(data: any) {
                //現在のコメント情報をstateに記憶させる
                this.setState({userData: data, commentData: this.state.commentData, user: this.state.user});
            }.bind(this),
            error: function(xhr: any, status: any, err: any) {
                console.error("/api/userlist", status, err.toString());
            }.bind(this)
        });
    }
    //1回のみ呼ばれる
    componentDidMount() {
        this.loadUsersFromServer();
        this.loadCommentsFromServer();
        setInterval(this.loadUsersFromServer, 2000);
        setInterval(this.loadCommentsFromServer, 350);
    }
    render(){
        return(
            <div className="Chat row">
                <div className={'col s3 m3 l3'} style={{height: '100vh', top:0, left:0, margin:0, padding:0}}>
                    <div>
                        <nav className="white">
                            <div className="nav-wrapper">
                                <div className="brand-logo center black-text">MediChat</div>
                            </div>
                        </nav>
                    </div>
                    <div>
                        <UserList data={this.state.userData} changeUserHandler={this.changeUser.bind(this)}/>
                    </div>
                </div>
                <div className={'col s9 m9 l9'} style={{height: '100vh', margin: 0, padding: 0}}>
                    <CommentBox url='/api/comments' data={this.state.commentData} handleCommentSubmit={this.handleCommentSubmit.bind(this)} user={this.state.user} pollInterval={300} />
                </div>
           </div>
        );
    }
}
